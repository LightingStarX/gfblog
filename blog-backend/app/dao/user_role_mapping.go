// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"blog-backend/app/dao/internal"
	"blog-backend/app/dao/utils"
	"blog-backend/app/model"
	"github.com/gogf/gf/frame/g"
)

// userRoleMappingDao is the manager for logic model data accessing and custom defined data operations functions management.
// You can define custom methods on it to extend its functionality as you wish.
type userRoleMappingDao struct {
	*internal.UserRoleMappingDao
}

var (
	// UserRoleMapping is globally public accessible object for table user_role_mapping operations.
	UserRoleMapping       userRoleMappingDao
	userRoleMappingWorker *utils.TableWorker
)

func init() {
	UserRoleMapping = userRoleMappingDao{
		internal.NewUserRoleMappingDao(),
	}
	userRoleMappingWorker = utils.NewTableWorker(UserRoleMapping.Table)
}

// 注意 user_role_mapping 只是中间的一个协调者，任何对于这个表的修改都不会改变其他表的内容
// 因此，此表不涉及任何事务相关的操作

// DeleteUserRoleMappingByUser 根据 model.User 来删除 user-role mapping 中的记录
func (d *userRoleMappingDao) DeleteUserRoleMappingByUser(user model.User) bool {
	if user.Uid == 0 {
		return false
	}

	_, err := g.Model(Role.Table).Where(Role.C.Uid, user.Uid).Delete()
	if err != nil {
		return false
	}
	return true
}

// DeleteUserRoleMappingByRole 根据 model.Role 来删除 user-role-mapping 表中的记录
func (d *userRoleMappingDao) DeleteUserRoleMappingByRole(role model.Role) bool {
	if role.Uid == 0 {
		return false
	}

	_, err := g.Model(Role.Table).Where(Role.C.Uid, role.Uid).Delete()
	if err != nil {
		return false
	}
	return true
}

func (d *userRoleMappingDao) AddUserRoleMapping(userId, roleId uint64) bool {
	if userId == 0 || roleId == 0 {
		return false
	}

	// 检查 roleId 和 userId 是否合法，即数据库中该两个id是否存在
	if !CheckUserByUid(userId) || !checkRoleByUid(roleId) {
		return false
	}

	id, err := userRoleMappingWorker.NextID()
	if err != nil {
		return false
	}

	mapping := model.UserRoleMapping{
		Uid:     id,
		UserUid: userId,
		RoleUid: roleId,
	}
	_, err = g.Model(UserRoleMapping.Table).Insert(mapping)
	if err != nil {
		return false
	}
	return true
}
