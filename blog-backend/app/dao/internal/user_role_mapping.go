// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// UserRoleMappingDao is the manager for logic model data accessing and custom defined data operations functions management.
type UserRoleMappingDao struct {
	gmvc.M                        // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      userRoleMappingColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB                 // DB is the raw underlying database management object.
	Table  string                 // Table is the underlying table name of the DAO.
}

// UserRoleMappingColumns defines and stores column names for table user_role_mapping.
type userRoleMappingColumns struct {
	Uid       string // 映射uid
	UserUid   string // 用户uid
	RoleUid   string // 角色uid
	GmtCreate string //
	GmtUpdate string //
}

// NewUserRoleMappingDao creates and returns a new DAO object for table data access.
func NewUserRoleMappingDao() *UserRoleMappingDao {
	columns := userRoleMappingColumns{
		Uid:       "uid",
		UserUid:   "user_uid",
		RoleUid:   "role_uid",
		GmtCreate: "gmt_create",
		GmtUpdate: "gmt_update",
	}
	return &UserRoleMappingDao{
		C:     columns,
		M:     g.DB("default").Model("user_role_mapping").Safe(),
		DB:    g.DB("default"),
		Table: "user_role_mapping",
	}
}
