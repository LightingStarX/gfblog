// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// UserDao is the manager for logic model data accessing and custom defined data operations functions management.
type UserDao struct {
	gmvc.M             // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      userColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB      // DB is the raw underlying database management object.
	Table  string      // Table is the underlying table name of the DAO.
}

// UserColumns defines and stores column names for table user.
type userColumns struct {
	Uid           string // 主键，分布式环境下不建议设置自增属性，而是在业务层通过分布式id生成算法生成id
	RoleUid       string // 用户角色的uid
	UserName      string // 用户登录账号使用的账号名称
	Password      string // 用户登录使用的密码
	NickName      string // 用户账号的账号名称，不允许重复
	Birthday      string // 用户的生日
	IndexUrl      string // 用户的主页地址url
	LastLoginIp   string // 用户上一次登录的ip地址
	Enabled       string // 用户账户启用状态(0：禁用，1：启用)
	AccountLevel  string // 账号等级，从1->100级
	TotalExp      string // 总共的经验值，经验值决定了等级
	TotalArticle  string // 文章总数
	TotalStar     string // 被点赞总数
	TotalCollect  string // 被收藏总数
	TotalComment  string // 被评论总数
	TotalChar     string // 文章总字数
	TotalFollower string // 总粉丝数
	GmtRegister   string // 注册时间
	GmtLastLogin  string // 上次登录时间
	GmtUpdate     string // 用户上一次更新时间
}

// NewUserDao creates and returns a new DAO object for table data access.
func NewUserDao() *UserDao {
	columns := userColumns{
		Uid:           "uid",
		RoleUid:       "role_uid",
		UserName:      "user_name",
		Password:      "password",
		NickName:      "nick_name",
		Birthday:      "birthday",
		IndexUrl:      "index_url",
		LastLoginIp:   "last_login_ip",
		Enabled:       "enabled",
		AccountLevel:  "account_level",
		TotalExp:      "total_exp",
		TotalArticle:  "total_article",
		TotalStar:     "total_star",
		TotalCollect:  "total_collect",
		TotalComment:  "total_comment",
		TotalChar:     "total_char",
		TotalFollower: "total_follower",
		GmtRegister:   "gmt_register",
		GmtLastLogin:  "gmt_last_login",
		GmtUpdate:     "gmt_update",
	}
	return &UserDao{
		C:     columns,
		M:     g.DB("default").Model("user").Safe(),
		DB:    g.DB("default"),
		Table: "user",
	}
}
