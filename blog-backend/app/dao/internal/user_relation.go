// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// UserRelationDao is the manager for logic model data accessing and custom defined data operations functions management.
type UserRelationDao struct {
	gmvc.M                     // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      userRelationColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB              // DB is the raw underlying database management object.
	Table  string              // Table is the underlying table name of the DAO.
}

// UserRelationColumns defines and stores column names for table user_relation.
type userRelationColumns struct {
	Uid         string //
	UserUid     string // 被关注用户的uid
	FollowerUid string // 追随者uid
	GmtCreate   string //
	GmtDeleted  string // 取消关注的时间
}

// NewUserRelationDao creates and returns a new DAO object for table data access.
func NewUserRelationDao() *UserRelationDao {
	columns := userRelationColumns{
		Uid:         "uid",
		UserUid:     "user_uid",
		FollowerUid: "follower_uid",
		GmtCreate:   "gmt_create",
		GmtDeleted:  "gmt_deleted",
	}
	return &UserRelationDao{
		C:     columns,
		M:     g.DB("default").Model("user_relation").Safe(),
		DB:    g.DB("default"),
		Table: "user_relation",
	}
}
