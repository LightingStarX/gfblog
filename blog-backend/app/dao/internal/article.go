// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// ArticleDao is the manager for logic model data accessing and custom defined data operations functions management.
type ArticleDao struct {
	gmvc.M                // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      articleColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB         // DB is the raw underlying database management object.
	Table  string         // Table is the underlying table name of the DAO.
}

// ArticleColumns defines and stores column names for table article.
type articleColumns struct {
	Uid          string // 文章uid
	UserUid      string // 文章所属用户uid
	Title        string // 文章标题
	SubTitle     string // 文章副标题
	IsOrigin     string // 是否原创(0: 否，1: 是)，若不是原创，即为转载文章
	IsShow       string // 是否允许展示(0: 不允许，1: 允许)
	IsDeleted    string // 文章是否删除
	IsRecommend  string // 文章是否被推荐
	AvatarUrl    string // 文章封面url
	TotalStar    string // 文章点赞数
	TotalCollect string // 文章总收藏数
	TotalReport  string // 文章总举报数
	TotalReprint string // 文章总转载次数
	TotalChar    string // 文章总字数
	TotalRead    string // 总阅读数
	GmtCreate    string //
	GmtUpdate    string //
	GmtDeleted   string //
}

// NewArticleDao creates and returns a new DAO object for table data access.
func NewArticleDao() *ArticleDao {
	columns := articleColumns{
		Uid:          "uid",
		UserUid:      "user_uid",
		Title:        "title",
		SubTitle:     "sub_title",
		IsOrigin:     "is_origin",
		IsShow:       "is_show",
		IsDeleted:    "is_deleted",
		IsRecommend:  "is_recommend",
		AvatarUrl:    "avatar_url",
		TotalStar:    "total_star",
		TotalCollect: "total_collect",
		TotalReport:  "total_report",
		TotalReprint: "total_reprint",
		TotalChar:    "total_char",
		TotalRead:    "total_read",
		GmtCreate:    "gmt_create",
		GmtUpdate:    "gmt_update",
		GmtDeleted:   "gmt_deleted",
	}
	return &ArticleDao{
		C:     columns,
		M:     g.DB("default").Model("article").Safe(),
		DB:    g.DB("default"),
		Table: "article",
	}
}
