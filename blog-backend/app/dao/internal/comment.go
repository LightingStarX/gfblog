// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// CommentDao is the manager for logic model data accessing and custom defined data operations functions management.
type CommentDao struct {
	gmvc.M                // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      commentColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB         // DB is the raw underlying database management object.
	Table  string         // Table is the underlying table name of the DAO.
}

// CommentColumns defines and stores column names for table comment.
type commentColumns struct {
	Uid             string //
	ParentUid       string // 父级评论uid，如果为0，表示是文章评论，其余的都是评论的评论
	ArticleUid      string // 文章uid
	UserUid         string // 用户uid
	Content         string // 评论内容
	TotalStar       string // 评论总点赞数
	TotalSubComment string // 该评论的总评论数
	IsShow          string // 该评论是否显示
	IsDeleted       string // 该评论是否被删除
	GmtCreate       string //
	GmtUpdate       string //
	GmtDeleted      string //
}

// NewCommentDao creates and returns a new DAO object for table data access.
func NewCommentDao() *CommentDao {
	columns := commentColumns{
		Uid:             "uid",
		ParentUid:       "parent_uid",
		ArticleUid:      "article_uid",
		UserUid:         "user_uid",
		Content:         "content",
		TotalStar:       "total_star",
		TotalSubComment: "total_sub_comment",
		IsShow:          "is_show",
		IsDeleted:       "is_deleted",
		GmtCreate:       "gmt_create",
		GmtUpdate:       "gmt_update",
		GmtDeleted:      "gmt_deleted",
	}
	return &CommentDao{
		C:     columns,
		M:     g.DB("default").Model("comment").Safe(),
		DB:    g.DB("default"),
		Table: "comment",
	}
}
