// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/frame/gmvc"
)

// ArticleCategoryMappingDao is the manager for logic model data accessing and custom defined data operations functions management.
type ArticleCategoryMappingDao struct {
	gmvc.M                               // M is the core and embedded struct that inherits all chaining operations from gdb.Model.
	C      articleCategoryMappingColumns // C is the short type for Columns, which contains all the column names of Table for convenient usage.
	DB     gdb.DB                        // DB is the raw underlying database management object.
	Table  string                        // Table is the underlying table name of the DAO.
}

// ArticleCategoryMappingColumns defines and stores column names for table article_category_mapping.
type articleCategoryMappingColumns struct {
	Uid         string //
	ArticleUid  string //
	CategoryUid string //
	GmtCreate   string //
	GmtUpdate   string //
}

// NewArticleCategoryMappingDao creates and returns a new DAO object for table data access.
func NewArticleCategoryMappingDao() *ArticleCategoryMappingDao {
	columns := articleCategoryMappingColumns{
		Uid:         "uid",
		ArticleUid:  "article_uid",
		CategoryUid: "category_uid",
		GmtCreate:   "gmt_create",
		GmtUpdate:   "gmt_update",
	}
	return &ArticleCategoryMappingDao{
		C:     columns,
		M:     g.DB("default").Model("article_category_mapping").Safe(),
		DB:    g.DB("default"),
		Table: "article_category_mapping",
	}
}
