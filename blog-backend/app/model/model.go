// =================================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// =================================================================================

package model

import (
	"github.com/gogf/gf/os/gtime"
)

// Article is the golang structure for table article.
type Article struct {
	Uid          uint64      `orm:"uid,primary"   json:"uid"`          // 文章uid
	UserUid      uint64      `orm:"user_uid"      json:"userUid"`      // 文章所属用户uid
	Title        string      `orm:"title"         json:"title"`        // 文章标题
	SubTitle     string      `orm:"sub_title"     json:"subTitle"`     // 文章副标题
	IsOrigin     int         `orm:"is_origin"     json:"isOrigin"`     // 是否原创(0: 否，1: 是)，若不是原创，即为转载文章
	IsShow       int         `orm:"is_show"       json:"isShow"`       // 是否允许展示(0: 不允许，1: 允许)
	IsDeleted    int         `orm:"is_deleted"    json:"isDeleted"`    // 文章是否删除
	IsRecommend  int         `orm:"is_recommend"  json:"isRecommend"`  // 文章是否被推荐
	AvatarUrl    string      `orm:"avatar_url"    json:"avatarUrl"`    // 文章封面url
	TotalStar    int         `orm:"total_star"    json:"totalStar"`    // 文章点赞数
	TotalCollect int         `orm:"total_collect" json:"totalCollect"` // 文章总收藏数
	TotalReport  int         `orm:"total_report"  json:"totalReport"`  // 文章总举报数
	TotalReprint int         `orm:"total_reprint" json:"totalReprint"` // 文章总转载次数
	TotalChar    int64       `orm:"total_char"    json:"totalChar"`    // 文章总字数
	TotalRead    int         `orm:"total_read"    json:"totalRead"`    // 总阅读数
	GmtCreate    *gtime.Time `orm:"gmt_create"    json:"gmtCreate"`    //
	GmtUpdate    *gtime.Time `orm:"gmt_update"    json:"gmtUpdate"`    //
	GmtDeleted   *gtime.Time `orm:"gmt_deleted"   json:"gmtDeleted"`   //
}

// ArticleCategory is the golang structure for table article_category.
type ArticleCategory struct {
	Uid       uint64      `orm:"uid,primary" json:"uid"`       //
	Name      string      `orm:"name"        json:"name"`      // 分类名称
	Enabled   int         `orm:"enabled"     json:"enabled"`   //
	GmtCreate *gtime.Time `orm:"gmt_create"  json:"gmtCreate"` //
	GmtUpdate *gtime.Time `orm:"gmt_update"  json:"gmtUpdate"` //
}

// ArticleCategoryMapping is the golang structure for table article_category_mapping.
type ArticleCategoryMapping struct {
	Uid         uint64      `orm:"uid,primary"  json:"uid"`         //
	ArticleUid  uint64      `orm:"article_uid"  json:"articleUid"`  //
	CategoryUid uint64      `orm:"category_uid" json:"categoryUid"` //
	GmtCreate   *gtime.Time `orm:"gmt_create"   json:"gmtCreate"`   //
	GmtUpdate   *gtime.Time `orm:"gmt_update"   json:"gmtUpdate"`   //
}

// ArticleExt is the golang structure for table article_ext.
type ArticleExt struct {
	Uid        uint64      `orm:"uid,primary" json:"uid"`        //
	ArticleUid uint64      `orm:"article_uid" json:"articleUid"` // 文章uid
	RawHtml    string      `orm:"raw_html"    json:"rawHtml"`    // 文章原始html
	RawEncrypt string      `orm:"raw_encrypt" json:"rawEncrypt"` // 文章加密后内容
	GmtCreate  *gtime.Time `orm:"gmt_create"  json:"gmtCreate"`  //
	GmtUpdate  *gtime.Time `orm:"gmt_update"  json:"gmtUpdate"`  //
}

// Comment is the golang structure for table comment.
type Comment struct {
	Uid             uint64      `orm:"uid,primary"       json:"uid"`             //
	ParentUid       uint64      `orm:"parent_uid"        json:"parentUid"`       // 父级评论uid，如果为0，表示是文章评论，其余的都是评论的评论
	ArticleUid      uint64      `orm:"article_uid"       json:"articleUid"`      // 文章uid
	UserUid         uint64      `orm:"user_uid"          json:"userUid"`         // 用户uid
	Content         string      `orm:"content"           json:"content"`         // 评论内容
	TotalStar       int         `orm:"total_star"        json:"totalStar"`       // 评论总点赞数
	TotalSubComment int         `orm:"total_sub_comment" json:"totalSubComment"` // 该评论的总评论数
	IsShow          int         `orm:"is_show"           json:"isShow"`          // 该评论是否显示
	IsDeleted       int         `orm:"is_deleted"        json:"isDeleted"`       // 该评论是否被删除
	GmtCreate       *gtime.Time `orm:"gmt_create"        json:"gmtCreate"`       //
	GmtUpdate       *gtime.Time `orm:"gmt_update"        json:"gmtUpdate"`       //
	GmtDeleted      *gtime.Time `orm:"gmt_deleted"       json:"gmtDeleted"`      //
}

// Role is the golang structure for table role.
type Role struct {
	Uid       uint64      `orm:"uid"        json:"uid"`       // 角色uid
	RoleName  string      `orm:"role_name"  json:"roleName"`  // 角色名称
	GmtCreate *gtime.Time `orm:"gmt_create" json:"gmtCreate"` //
	GmtUpdate *gtime.Time `orm:"gmt_update" json:"gmtUpdate"` //
}

// Tag is the golang structure for table tag.
type Tag struct {
	Uid          uint64      `orm:"uid,primary"   json:"uid"`          //
	TagName      string      `orm:"tag_name"      json:"tagName"`      // 标签名称
	TotalArticle int         `orm:"total_article" json:"totalArticle"` // 该标签下的文章总数
	GmtCreate    *gtime.Time `orm:"gmt_create"    json:"gmtCreate"`    //
	GmtUpdate    *gtime.Time `orm:"gmt_update"    json:"gmtUpdate"`    //
}

// TagArticleMapping is the golang structure for table tag_article_mapping.
type TagArticleMapping struct {
	Uid        uint64      `orm:"uid,primary" json:"uid"`        //
	TagUid     uint64      `orm:"tag_uid"     json:"tagUid"`     //
	ArticleUid uint64      `orm:"article_uid" json:"articleUid"` //
	GmtCreate  *gtime.Time `orm:"gmt_create"  json:"gmtCreate"`  //
	GmtDeleted *gtime.Time `orm:"gmt_deleted" json:"gmtDeleted"` //
}

// User is the golang structure for table user.
type User struct {
	Uid           uint64      `orm:"uid,primary"      json:"uid"`           // 主键，分布式环境下不建议设置自增属性，而是在业务层通过分布式id生成算法生成id
	UserName      string      `orm:"user_name"        json:"userName"`      // 用户登录账号使用的账号名称
	Password      string      `orm:"password"         json:"password"`      // 用户登录使用的密码
	NickName      string      `orm:"nick_name,unique" json:"nickName"`      // 用户账号的账号名称，不允许重复
	Birthday      *gtime.Time `orm:"birthday"         json:"birthday"`      // 用户的生日
	IndexUrl      string      `orm:"index_url"        json:"indexUrl"`      // 用户的主页地址url
	LastLoginIp   string      `orm:"last_login_ip"    json:"lastLoginIp"`   // 用户上一次登录的ip地址
	Enabled       int         `orm:"enabled"          json:"enabled"`       // 用户账户启用状态(0：禁用，1：启用)
	AccountLevel  int         `orm:"account_level"    json:"accountLevel"`  // 账号等级，从1->100级
	TotalExp      int         `orm:"total_exp"        json:"totalExp"`      // 总共的经验值，经验值决定了等级
	TotalArticle  int         `orm:"total_article"    json:"totalArticle"`  // 文章总数
	TotalStar     int         `orm:"total_star"       json:"totalStar"`     // 被点赞总数
	TotalCollect  int         `orm:"total_collect"    json:"totalCollect"`  // 被收藏总数
	TotalComment  int         `orm:"total_comment"    json:"totalComment"`  // 被评论总数
	TotalChar     int64       `orm:"total_char"       json:"totalChar"`     // 文章总字数
	TotalFollower int         `orm:"total_follower"   json:"totalFollower"` // 总粉丝数
	GmtRegister   *gtime.Time `orm:"gmt_register"     json:"gmtRegister"`   // 注册时间
	GmtLastLogin  *gtime.Time `orm:"gmt_last_login"   json:"gmtLastLogin"`  // 上次登录时间
	GmtUpdate     *gtime.Time `orm:"gmt_update"       json:"gmtUpdate"`     // 用户上一次更新时间
}

// UserProfile is the golang structure for table user_profile.
type UserProfile struct {
	Uid    uint64 `orm:"uid,primary" json:"uid"`    //
	Name   string `orm:"name"        json:"name"`   //
	Desc   string `orm:"desc"        json:"desc"`   //
	Qqchat string `orm:"qqchat"      json:"qqchat"` //
	Wechat string `orm:"wechat"      json:"wechat"` //
	Weibo  string `orm:"weibo"       json:"weibo"`  //
	Bili   string `orm:"bili"        json:"bili"`   //
	Email  string `orm:"email"       json:"email"`  //
	Img    string `orm:"img"         json:"img"`    //
	Avatar string `orm:"avatar"      json:"avatar"` //
}

// UserRelation is the golang structure for table user_relation.
type UserRelation struct {
	Uid         uint64      `orm:"uid"          json:"uid"`         //
	UserUid     uint64      `orm:"user_uid"     json:"userUid"`     // 被关注用户的uid
	FollowerUid uint64      `orm:"follower_uid" json:"followerUid"` // 追随者uid
	GmtCreate   *gtime.Time `orm:"gmt_create"   json:"gmtCreate"`   //
	GmtDeleted  *gtime.Time `orm:"gmt_deleted"  json:"gmtDeleted"`  // 取消关注的时间
}

// UserRoleMapping is the golang structure for table user_role_mapping.
type UserRoleMapping struct {
	Uid       uint64      `orm:"uid,primary" json:"uid"`       // 映射uid
	UserUid   uint64      `orm:"user_uid"    json:"userUid"`   // 用户uid
	RoleUid   uint64      `orm:"role_uid"    json:"roleUid"`   // 角色uid
	GmtCreate *gtime.Time `orm:"gmt_create"  json:"gmtCreate"` //
	GmtUpdate *gtime.Time `orm:"gmt_update"  json:"gmtUpdate"` //
}
